{
  "id": "mutable_vs_immutable_objects",
  "title": "Mutable vs Immutable Objects",
  "titleColor": "#ffffff",
  "imageSrc": "./assets/images/nature1.jpg",
  "type": "javascript",
  "topicName": "JavaScript",
  "html": "<h2> Mutable and immutable in JavaScript </h2>\n\n<p>Mutable is a type of variable that can be changed. In JavaScript, only objects and arrays are mutable, not primitive values.</p>\n\n<p>A mutable object is an object whose state can be modified after it is created.</p>\n\n<p>Immutables are the objects whose state cannot be changed once the object is created.</p>\n\n<h3>Let’s break it down</h3>\n\n<p>There are two data types in JavaScript — Primitive Types (value type) and Non-Primitive Types (reference type).</p>\n\n<img src='../../../assets/images/javascript-datatype.png' />\n\n<h3>Value Types</h3>\n<p>Value types are been stored on the Stack in our memory. The stack is simply a stack of data that has a “LIFO” (last in, first out) data structure. It doesn’t have much space (compare to other data structures) but due to how it works, it is very fast to access.</p>\n\n<p>When storing a value type in memory, it adds an element to the top of the stack with the value of the newly created variable. When creating a new variable and assigned the first one to the new one, it adds a new element on top of the stack with the value of the new variable (which is the value of the first created variable).</p>\n\n\n<h3>Reference Types</h3>\n<p>Reference types are been stored on the Heap. The Heap, indifference from the stack, has no order of how to store the data. You can think of it as it stores the data randomly, where each of the data has its own address. It is slower to access but has much more space since it handles more complex variables.</p>\n\n<p>When storing a reference type in memory, it adds a new element to the top of the stack when its value is a pointer/reference to the address of the object that has been stored on the heap.</p>\n\n\n<h3>Mutable and Immutable</h3>\n\n<p>Did you see how changing the value type name data does NOT affect the newName data but when changing the Person object data it affects the newPerson data?</p>\n\n<p>This is happening because of how the data is been stored.</p>\n\n<p>Each time a value type is been created, a new element gets into the top of the stack and stores the data of that variable. On the other hand, when creating a reference type a new element gets into the top of the stack but this time, it stores the reference/pointer to the address location of the object in the heap. Then, when we assign the created object to a new object variable a new element gets into the top of the stack BUT with the same reference/pointer to the first object.</p>\n\n<p>Therefore, when changing the data of a created object, all other objects that point to the same address location on the heap are being changed also.</p>\n\n<p>With that in mind, we can say that a value type is immutable where a reference type is mutable.</p>\n\n",
  "created": "",
  "description": ""
}
